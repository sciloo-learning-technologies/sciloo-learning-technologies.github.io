{"id":1115,"date":"2019-02-17T13:50:22","date_gmt":"2019-02-17T08:20:22","guid":{"rendered":"https:\/\/sciloo.com\/?p=1115"},"modified":"2019-02-17T13:50:23","modified_gmt":"2019-02-17T08:20:23","slug":"microservices-part-1-basic-concepts","status":"publish","type":"post","link":"http:\/\/localhost:8180\/2019\/02\/17\/microservices-part-1-basic-concepts\/","title":{"rendered":"Microservices Part 1 &#8211; Basic Concepts"},"content":{"rendered":"\n<h3>A microservice is an architectural style with small services which are<\/h3>\n\n\n\n<ol><li>isolated, <\/li><li>loosely-coupled <\/li><li>works on a single concern.<\/li><li>Own their own data<\/li><li>Lightweight communication usually with HTTP Restful API<\/li><li>Built around business capabilities\/domain, example below <\/li><\/ol>\n\n\n\n<p> DDD (<g class=\"gr_ gr_13 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"13\" data-gr-id=\"13\">Domain driven<\/g> design) is the way to go while <g class=\"gr_ gr_25 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"25\" data-gr-id=\"25\">designig<\/g> microservices.<\/p>\n\n\n\n<figure class=\"wp-block-image\"><img src=\"http:\/\/lh5.googleusercontent.com\/OlYKfFDflU8_Pjv-ppbq6CtTeV8-J7O-a6PKceZJSLQWaVU4x30Kf63oKlwyaxHonk01lwI5dR8yqSSZvHd8py7PPTlhhoQGTtP94oPNIEOzeCHnB8LSxuSZcqG2sm-OCgVmWZw-\" alt=\"\"\/><\/figure>\n\n\n\n<ol><li>Independently deployable by automated means<\/li><li>Right tech for right problem &#8211; each microservice can be implemented on its own tech<\/li><\/ol>\n\n\n\n<p>Advantages<\/p>\n\n\n\n<ol><li>Language independent as conform to HTTP Restful<\/li><li>Individual team for each microservice<\/li><li>Scalable<\/li><li>Fault tolerance<\/li><li>Container friendly (docker, kubernete)<\/li><li>Fast iteration for adding code<\/li><li>small development teams, <\/li><li>shorter development cycles<\/li><li>flexibility in language selection<\/li><li>enhanced service scalability<\/li><\/ol>\n\n\n\n<p>Disadvantages<\/p>\n\n\n\n<ol><li>Complex interactions &#8211; System + Operational<\/li><li>Overhead of communication across databases and servers<\/li><li>Resource and nw overhead<\/li><li>Complex authentication and authorization scheme in the Microservices <\/li><\/ol>\n\n\n\n<p>Design Considerations<\/p>\n\n\n\n<ul><li><strong>Cross-cutting<\/strong>: microservices need not deal with details regarding problems outside their specific scope.<\/li><li><strong>Data sharing<\/strong> is hard. Microservices tend to favor per-service or per-group databases that can be updated directly. <\/li><li><strong>Availability<\/strong>: Microservices, by virtue of being isolated and independent, need to be monitored to detect failures.<\/li><li><strong>Evolution<\/strong>: Microservices tend to evolve fast. Old versions are usually available as long as there are clients who need to consume data from them. Newer versions are exposed in an application-specific way. For instance, with an HTTP\/REST API, the version of the microservice may be part of a custom header, or be embedded in the returned data. Account for this.<\/li><li><strong>Automated deployment<\/strong>: The whole reason that microservices are so convenient nowadays is that it is so easy to deploy a new service from a completely clean environment. <\/li><li><strong>Interdependencies<\/strong>: Keep them to a minimum. <\/li><li><strong>Transport and data format<\/strong>: Microservices are fit for any transport and data format; however, they are usually exposed publicly through a RESTful API over HTTP. Any data format fit for your information works. HTTP + JSON is very popular these days, but there is nothing stopping you from using protocol-buffers over AMQP, for instance.<\/li><\/ul>\n\n\n\n<p>microservices are developed almost in isolation. <strong>Cross-cutting concerns <\/strong>are dealt with by <strong>upper layers<\/strong> in the software stack\n\n<\/p>\n","protected":false},"excerpt":{"rendered":"<p>A microservice is an architectural style with small services which are isolated, loosely-coupled works on a single concern. Own their own data Lightweight communication usually with HTTP Restful API Built around business capabilities\/domain, example below DDD (Domain driven design) is the way to go while designig microservices. Independently deployable by automated means Right tech for&hellip; <a class=\"more-link\" href=\"http:\/\/localhost:8180\/2019\/02\/17\/microservices-part-1-basic-concepts\/\">Continue reading <span class=\"screen-reader-text\">Microservices Part 1 &#8211; Basic Concepts<\/span><\/a><\/p>\n","protected":false},"author":1,"featured_media":0,"comment_status":"open","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[132,131],"tags":[277,276,100],"_links":{"self":[{"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/posts\/1115"}],"collection":[{"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/comments?post=1115"}],"version-history":[{"count":1,"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/posts\/1115\/revisions"}],"predecessor-version":[{"id":1117,"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/posts\/1115\/revisions\/1117"}],"wp:attachment":[{"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/media?parent=1115"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/categories?post=1115"},{"taxonomy":"post_tag","embeddable":true,"href":"http:\/\/localhost:8180\/wp-json\/wp\/v2\/tags?post=1115"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}